name: Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # CI Jobs (always run)
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install yt-dlp (for tests)
        run: |
          python -m pip install --upgrade pip
          pip install yt-dlp
          
      - name: Check formatting
        run: cargo fmt --all -- --check
        
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Run tests
        run: cargo test --verbose

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Build Jobs (always run)
  build:
    name: Build ${{ matrix.target }}
    needs: [test, security]
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x86_64
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64
            
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x86_64
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64
            
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x86_64
            
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev clang llvm
        
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install pkg-config openssl
        
    - name: Configure environment (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
        
    - name: Build binary
      run: |
        cargo build --release --target ${{ matrix.target }}
        
    - name: Prepare release artifact
      shell: bash
      run: |
        mkdir -p release
        
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cp target/${{ matrix.target }}/release/transcriptor.exe release/
          cd release
          7z a ../transcriptor-${{ matrix.name }}.zip transcriptor.exe
        else
          cp target/${{ matrix.target }}/release/transcriptor release/
          cd release
          tar czf ../transcriptor-${{ matrix.name }}.tar.gz transcriptor
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: transcriptor-${{ matrix.name }}
        path: transcriptor-${{ matrix.name }}.*
        
  # Test built binaries
  test-binaries:
    name: Test built binaries
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux binary
      uses: actions/download-artifact@v4
      with:
        name: transcriptor-linux-x86_64
        
    - name: Test binary
      run: |
        tar xzf transcriptor-linux-x86_64.tar.gz
        chmod +x transcriptor
        ./transcriptor --version
        ./transcriptor --help
        
  # Release Jobs (only on tags)
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, test-binaries]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          transcriptor-linux-x86_64/transcriptor-linux-x86_64.tar.gz
          transcriptor-linux-arm64/transcriptor-linux-arm64.tar.gz
          transcriptor-macos-x86_64/transcriptor-macos-x86_64.tar.gz
          transcriptor-macos-arm64/transcriptor-macos-arm64.tar.gz
          transcriptor-windows-x86_64/transcriptor-windows-x86_64.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to crates.io (only on tags)
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CRATES_TOKEN }} 